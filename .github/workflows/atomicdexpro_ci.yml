name: AtomicDEX Pro CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 0 * * 1'

jobs:

  linux-build:
    name: Linux Build
    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Install QT (Linux)
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.2'
          host: 'linux'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Setup Nim (Linux)
        uses: jiro4989/setup-nim-action@v1.0.2
        with:
          nim-version: '1.2.0'

      - name: Install deps (Linux)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update  # prevents repo404 errors on apt-remove below
          sudo apt-get remove php* msodbcsql17 mysql*
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get upgrade -y

          # base deps
          sudo apt-get install build-essential \
                               libgl1-mesa-dev \
                               ninja-build \
                               curl \
                               wget \
                               software-properties-common \
                               lsb-release \
                               libpulse-dev \
                               libtool \
                               autoconf \
                               unzip \
                               libssl-dev \
                               libxkbcommon-x11-0 \
                               git -y
                               

          # set clang version
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 777
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 777
          
          # set gnu compilers version
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 777
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 777
          
          # get llvm
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 9
          
          sudo apt-get update
          sudo apt-get install libc++abi-9-dev libc++-9-dev -y
          
          export CXXFLAGS=-stdlib=libc++
          export LDFLAGS=-stdlib=libc++
          export CXX=clang++-9
          export CC=clang-9
          
          # get right cmake version
          wget https://github.com/Kitware/CMake/releases/download/v3.17.1/cmake-3.17.1.tar.gz -O cmake.tar.gz
          tar xvzf cmake.tar.gz
          cd cmake-3.17.1
          ./bootstrap
          sudo make install
          cd ..
          
          # get libwally
          git clone https://github.com/KomodoPlatform/libwally-core.git
          cd libwally-core
          ./tools/autogen.sh
          ./configure --disable-shared
          sudo make -j2 install
          cd ..

      - name: Build (Linux)
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/5.14.2/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/5.14.2
          export PATH=${{ github.workspace }}/Qt/5.14.2/gcc_64/bin:$PATH
          export PATH=$HOME/.nimble/bin:$PATH
          export CXXFLAGS=-stdlib=libc++
          export LDFLAGS=-stdlib=libc++
          export CXX=clang++-9
          export CC=clang-9
          cd ci_tools_atomic_dex
          nimble build -y
        
          # duplicating because got suspicion that update-alternatives doesnt save between steps
         
          # set clang version
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 777
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 777
          
          # set gnu compilers version
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 777
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 777
          
          ./ci_tools_atomic_dex --install_dependencies
          ./ci_tools_atomic_dex build debug
          ./ci_tools_atomic_dex bundle debug
          
      - name: Upload bundle artifact (Linux)
        uses: actions/upload-artifact@v1
        with:
          name: dexpro-ubuntu-debug.tar.gz
          path: ./ci_tools_atomic_dex/bundle-Debug/AntaraAtomicDexAppDir.tar.gz


  macos-build:
    name: MacOS Build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache Qt (Mac)
        id: cache-qt-mac
        uses: actions/cache@v1
        with:
          path: '${{ github.workspace }}/Qt/5.14.2'
          key: ${{ runner.os }}-qt

      - name: Install QT (MacOS)
        if: steps.cache-qt-mac.outputs.cache-hit != 'true'
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.2'
          host: 'mac'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Install deps (MacOS)
        run: |
          brew update
          brew upgrade
          brew install autoconf \
                       automake \
                       libtool \
                       pkgconfig \
                       wget \
                       nim \
                       cmake \
                       ninja \
                       git \
                       boost \
                       gcc \
                       llvm@9
          
          export CC=/usr/local/opt/llvm@9/bin/clang
          
          # get curl
          git clone https://github.com/curl/curl.git
          cd curl
          git checkout curl-7_70_0
          ./buildconf
          ./configure --disable-shared --enable-static --without-libidn2 --without-ssl --without-nghttp2 --disable-ldap --with-darwinssl
          make install
          cd ../
          
          # get libbitcoin
          git clone --depth 1 --branch version5 --single-branch "https://github.com/libbitcoin/secp256k1"
          cd secp256k1
          ./autogen.sh
          ./configure --disable-shared --disable-tests --enable-module-recovery
          make
          sudo make install
          cd ../

          git clone --depth 1 --branch version3 --single-branch https://github.com/KomodoPlatform/libbitcoin-system.git
          cd libbitcoin-system
          ./autogen.sh
          ./configure --with-boost --disable-shared
          make
          sudo make install
          sudo update_dyld_shared_cache
          
          # get SDKs 
          git clone https://github.com/phracker/MacOSX-SDKs $HOME/sdk

      - name: Build (MacOS)
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/5.14.2/clang_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/5.14.2
          cd ci_tools_atomic_dex
          nimble build -y
          ./ci_tools_atomic_dex bundle debug --osx_sdk=$HOME/sdk/MacOSX10.13.sdk --compiler=/usr/local/opt/llvm@9/bin/clang++
          ls bundle-Debug/atomicDEX-Pro.dmg

      - name: Upload artifacts (MacOS)
        uses: actions/upload-artifact@v1
        with:
          name: dexpro-mac-debug.dmg
          path: ./ci_tools_atomic_dex/bundle-Debug/atomicDEX-Pro.dmg

  windows-build:
    name: Win Build
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache Qt (Win)
        id: cache-qt-win
        uses: actions/cache@v1
        with:
          path: 'C:\Qt\5.14.2'
          key: ${{ runner.os }}-qt

      - name: Install QT (Win)
        if: steps.cache-qt-win.outputs.cache-hit != 'true'
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.2'
          host: 'windows'
          target: 'desktop'
          dir: 'C:\'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Build (Win)
        shell: powershell
        run: |
          Set-ExecutionPolicy RemoteSigned -scope CurrentUser
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          $Env:QT_INSTALL_CMAKE_PATH = "C:\Qt\5.14.2\msvc2017_64"
          
          cd ci_tools_atomic_dex

          scoop install nim --global
          scoop install llvm --global
          scoop install ninja --global
          scoop install cmake --global
          scoop install git --global
          scoop install 7zip  --global

          # clear scoop cache
          scoop cache rm 7zip
          scoop cache rm git
          scoop cache rm cmake
          scoop cache rm ninja
          scoop cache rm llvm
          scoop cache rm nim

          $file = 'src\generate.nim'
          $regex = '(?<=g_vcpkg_cmake_script_path & ")[^"]*'
          (Get-Content $file) -replace $regex, ' -DVCPKG_TARGET_TRIPLET=x64-windows ' | Set-Content $file
          nimble build -y
          
          # downloading debug dlls because powershell build doesnt put it
          $SHAORIG = "A31827929A4D73EB71BD6986C38EB16D4E779DC3880EFA520869D00C3C0E2AB9"
          $DWFILE = ($PWD | select -exp Path) + '\debuglibs-win-dexpro.zip'
          (New-Object System.Net.WebClient).DownloadFile('https://github.com/KomodoPlatform/depot/releases/download/0.1/debuglibs-win-atomicdexpro.zip', $DWFILE)
          $SHADW = Get-FileHash -Algorithm SHA256 .\debuglibs-win-dexpro.zip | select -exp Hash
          if ($SHADW -ne $SHAORIG) {Throw "Wrong hash: $SHADW =! $SHAORIG"}
          
          cmd /c '.\ci_tools_atomic_dex.exe --install_dependencies 2>&1'
          cmd /c '.\ci_tools_atomic_dex.exe build debug 2>&1'
          7z e -o'build-Debug\bin\' .\debuglibs-win-dexpro.zip
          cmd /c '.\ci_tools_atomic_dex.exe bundle debug 2>&1'
          ls bundle-Debug/bundle.zip

      - name: Upload artifacts (Windows)
        uses: actions/upload-artifact@v1
        with:
          name: dexpro-win-debug.zip
          path: ./ci_tools_atomic_dex/bundle-Debug/bundle.zip
